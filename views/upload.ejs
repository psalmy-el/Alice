<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Upload Media Group</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    #previews {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 20px;
    }
    .preview-item {
      width: 150px;
      height: 150px;
      border: 1px solid #ccc;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }
    .preview-item img, .preview-item video {
      max-width: 100%;
      max-height: 100%;
      object-fit: cover;
    }
    .remove-preview {
      position: absolute;
      top: 5px;
      right: 5px;
      background: rgba(0,0,0,0.5);
      color: white;
      border: none;
      border-radius: 50%;
      width: 25px;
      height: 25px;
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
    .upload-area {
      height: 150px;
      border: 2px dashed #ccc;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      margin-bottom: 20px;
    }
    .featured-checkbox {
      position: absolute;
      bottom: 5px;
      left: 5px;
      z-index: 10;
    }
    .featured-label {
      background: rgba(0,0,0,0.5);
      color: white;
      padding: 2px 5px;
      font-size: 10px;
      border-radius: 3px;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="/">Media Admin</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="/">Dashboard</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/upload">Upload New</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-4">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <div class="card">
          <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Upload Media Group</h4>
          </div>
          <div class="card-body">
            <div class="upload-area" id="uploadArea">
              <i class="fas fa-cloud-upload-alt fa-3x mb-3"></i>
              <p>Drop files here or click to select</p>
              <input type="file" id="mediaFiles" multiple accept="image/*,video/*" style="display: none;">
            </div>
            
            <div id="previews" class="mb-3"></div>
            
            <form action="/upload-group" method="POST" enctype="multipart/form-data" id="uploadForm">
              <div class="mb-3">
                <label for="title" class="form-label">Group Title</label>
                <input type="text" class="form-control" id="title" name="title" required>
              </div>
              
              <div class="mb-3">
                <label for="description" class="form-label">Group Description</label>
                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
              </div>
              
              <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id">
                  <option value="">-- Select Category --</option>
                  <% categories.forEach(category => { %>
                    <option value="<%= category.id %>"><%= category.name %></option>
                  <% }); %>
                </select>
              </div>
              
              <!-- Hidden inputs for file data -->
              <div id="fileInputsContainer"></div>
              
              <div class="text-end">
                <a href="/" class="btn btn-secondary me-2">Cancel</a>
                <button type="submit" class="btn btn-primary">Upload Group</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const uploadArea = document.getElementById('uploadArea');
    const mediaFilesInput = document.getElementById('mediaFiles');
    const previewsContainer = document.getElementById('previews');
    const fileInputsContainer = document.getElementById('fileInputsContainer');
    const uploadForm = document.getElementById('uploadForm');
    
    // Track files and featured image
    let files = [];
    let featuredIndex = 0;
    
    // Handle click on upload area
    uploadArea.addEventListener('click', () => {
      mediaFilesInput.click();
    });
    
    // Handle drag and drop
    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.style.borderColor = '#007bff';
    });
    
    uploadArea.addEventListener('dragleave', () => {
      uploadArea.style.borderColor = '#ccc';
    });
    
    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.style.borderColor = '#ccc';
      if (e.dataTransfer.files.length) {
        handleFiles(e.dataTransfer.files);
      }
    });
    
    // Handle file selection
    mediaFilesInput.addEventListener('change', (e) => {
      if (e.target.files.length) {
        handleFiles(e.target.files);
      }
    });
    
    // Process selected files
    function handleFiles(filesList) {
      for (let i = 0; i < filesList.length; i++) {
        const file = filesList[i];
        if (file.type.startsWith('image/') || file.type.startsWith('video/')) {
          files.push(file);
          createPreview(file, files.length - 1);
        }
      }
      
      updateFormInputs();
    }
    
    // Create preview for a file
    function createPreview(file, index) {
      const reader = new FileReader();
      const previewItem = document.createElement('div');
      previewItem.className = 'preview-item';
      previewItem.dataset.index = index;
      
      reader.onload = function(event) {
        if (file.type.startsWith('image/')) {
          const img = document.createElement('img');
          img.src = event.target.result;
          previewItem.appendChild(img);
        } else if (file.type.startsWith('video/')) {
          const video = document.createElement('video');
          video.controls = true;
          const source = document.createElement('source');
          source.src = event.target.result;
          source.type = file.type;
          video.appendChild(source);
          previewItem.appendChild(video);
        }
        
        // Add remove button
        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-preview';
        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
        removeBtn.addEventListener('click', () => removeFile(index));
        previewItem.appendChild(removeBtn);
        
        // Add featured checkbox
        const featuredInput = document.createElement('input');
        featuredInput.type = 'radio';
        featuredInput.name = 'featured';
        featuredInput.className = 'featured-checkbox';
        featuredInput.checked = index === featuredIndex;
        featuredInput.addEventListener('change', () => {
          if (featuredInput.checked) {
            featuredIndex = index;
            updateFormInputs();
          }
        });
        previewItem.appendChild(featuredInput);
        
        // Add featured label
        const featuredLabel = document.createElement('span');
        featuredLabel.className = 'featured-label';
        featuredLabel.textContent = 'Featured';
        featuredLabel.style.display = index === featuredIndex ? 'block' : 'none';
        previewItem.appendChild(featuredLabel);
        
        previewsContainer.appendChild(previewItem);
      };
      
      reader.readAsDataURL(file);
    }
    
    // Remove a file
    function removeFile(index) {
      files = files.filter((_, i) => i !== index);
      
      // Reset featuredIndex if needed
      if (featuredIndex === index) {
        featuredIndex = files.length > 0 ? 0 : -1;
      } else if (featuredIndex > index) {
        featuredIndex--;
      }
      
      // Clear and rebuild previews
      previewsContainer.innerHTML = '';
      files.forEach((file, i) => createPreview(file, i));
      
      updateFormInputs();
    }
    
    // Update hidden form inputs
    function updateFormInputs() {
      fileInputsContainer.innerHTML = '';
      
      if (files.length > 0) {
        // Create a FormData for files
        const formData = new FormData();
        
        files.forEach((file, index) => {
          // Add file
          formData.append('media[]', file);
          
          // Create hidden input for featured flag
          const featuredInput = document.createElement('input');
          featuredInput.type = 'hidden';
          featuredInput.name = 'featured';
          featuredInput.value = index === featuredIndex ? '1' : '0';
          fileInputsContainer.appendChild(featuredInput);
          
          // Update UI to show which is featured
          const previews = document.querySelectorAll('.preview-item');
          previews.forEach((preview, i) => {
            const label = preview.querySelector('.featured-label');
            if (label) {
              label.style.display = i === featuredIndex ? 'block' : 'none';
            }
          });
        });
        
        // Store FormData in a way the form can use
        uploadForm.files = formData;
      }
    }
    
    // Override form submission to handle files
    uploadForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      if (files.length === 0) {
        alert('Please select at least one file to upload');
        return;
      }
      
      const formData = new FormData(this);
      
      // Add all files to FormData
      files.forEach((file, index) => {
        formData.append('media[]', file);
        formData.append('is_featured[]', index === featuredIndex ? '1' : '0');
      });
      
      // Submit form using fetch API
      fetch(uploadForm.action, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.href = '/';  // Redirect to home page on success
        } else {
          alert('Upload failed: ' + data.message);
        }
      })
      .catch(error => {
        alert('Error uploading files: ' + error.message);
      });
    });
  </script>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>